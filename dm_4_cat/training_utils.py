# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_training_utils.ipynb.

# %% auto 0
__all__ = ['losses_dict', 'optimizers_dict', 'metrics_dict', 'get_loss_func', 'get_optimizer', 'compute_metrics']

# %% ../nbs/03_training_utils.ipynb 3
from operator import gt, lt

import torch

# %% ../nbs/03_training_utils.ipynb 4
losses_dict = {}

def get_loss_func(loss:str # Key into the losses dictionary
                    ):
    "Getter method to retrieve a loss function"

    assert loss in losses_dict.keys(), f'{loss} is not an existing loss function, choose one from {losses_dict.keys()}.'
    
    return losses_dict[loss]

# %% ../nbs/03_training_utils.ipynb 6
optimizers_dict = {}

def get_optimizer(optim:str, # Key into the optimizer dictionary
                  kwargs:dict # Optimizer parameters
                    ):
    "Getter method to retrieve an optimizer"

    assert optim in optimizers_dict.keys(), f'{optim} is not an existing optimizer, choose one from {optimizers_dict.keys()}.'
    
    return optimizers_dict[optim](**kwargs)

# %% ../nbs/03_training_utils.ipynb 8
def compute_metrics(name:str,               # Name of the training stage (train, val, test)
                    outputs:torch.Tensor,   # The output of the model       
                    labels:torch.Tensor,    # The ground truth
                    loss:float,             # The loss of the model
                    example_ct:int,         # Number of examples processed by the model
                    step_ct:int,            # Number of backpropagation steps the model has done
                    epoch:float             # The training epoch
                    )->dict:                # Dictionary of the metrics
    "Compute new metrics from outputs and labels and format existing ones."

    
    return {f'{name}/loss': loss,
            f'{name}/example_ct': example_ct,
            f'{name}/step_ct': step_ct,
            f'{name}/epoch': epoch
            }

# %% ../nbs/03_training_utils.ipynb 9
metrics_dict = {
    'loss': lt,
    'step': gt
}
