# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_network.ipynb.

# %% auto 0
__all__ = ['NetworkManager']

# %% ../nbs/02_network.ipynb 3
from typing import Union, BinaryIO, IO
from os import PathLike

import torch
from torch.nn import Module


# %% ../nbs/02_network.ipynb 6
class NetworkManager:
    "Manage your networks through a dictionary containing pytorch module classes and kwargs"

    def __init__(self) -> None:
        self.network_dict = {
            
        }

# %% ../nbs/02_network.ipynb 8
@patch
def get_model(self:NetworkManager,
                network:str, # A key of the network dictionary
                weights_path:Union[str, PathLike, BinaryIO, IO[bytes]] = None): # A a file-like object to the network weights
    "A getter method to retrieve the wanted network"
    assert network in self.network_dict.keys(), f'{network} is not an existing network, choose one from {self.network_dict.keys()}.'
    
    net_class, kwargs = self.network_dict[network]
    model = net_class(**kwargs)

    if weights_path is not None:
        model.load_state_dict(torch.load(weights_path))

    return model
