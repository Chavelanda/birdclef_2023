# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/birdclef_2023',
                'doc_host': 'https://Chavelanda.github.io',
                'git_url': 'https://github.com/Chavelanda/birdclef_2023',
                'lib_path': 'birdclef'},
  'syms': { 'birdclef.dataset': { 'birdclef.dataset.BirdClef': ('dataset.html#birdclef', 'birdclef/dataset.py'),
                                  'birdclef.dataset.BirdClef.__getitem__': ('dataset.html#birdclef.__getitem__', 'birdclef/dataset.py'),
                                  'birdclef.dataset.BirdClef.__init__': ('dataset.html#birdclef.__init__', 'birdclef/dataset.py'),
                                  'birdclef.dataset.BirdClef.__len__': ('dataset.html#birdclef.__len__', 'birdclef/dataset.py'),
                                  'birdclef.dataset.MyPipeline': ('dataset.html#mypipeline', 'birdclef/dataset.py'),
                                  'birdclef.dataset.MyPipeline.__init__': ('dataset.html#mypipeline.__init__', 'birdclef/dataset.py'),
                                  'birdclef.dataset.MyPipeline.forward': ('dataset.html#mypipeline.forward', 'birdclef/dataset.py'),
                                  'birdclef.dataset.MyPipeline.inverse_transform': ( 'dataset.html#mypipeline.inverse_transform',
                                                                                     'birdclef/dataset.py'),
                                  'birdclef.dataset.get_dataloader': ('dataset.html#get_dataloader', 'birdclef/dataset.py'),
                                  'birdclef.dataset.get_dataset': ('dataset.html#get_dataset', 'birdclef/dataset.py')},
            'birdclef.experiment': {},
            'birdclef.network': { 'birdclef.network.EfficientNetV2': ('network.html#efficientnetv2', 'birdclef/network.py'),
                                  'birdclef.network.EfficientNetV2.__init__': ( 'network.html#efficientnetv2.__init__',
                                                                                'birdclef/network.py'),
                                  'birdclef.network.EfficientNetV2.forward': ('network.html#efficientnetv2.forward', 'birdclef/network.py'),
                                  'birdclef.network.get_model': ('network.html#get_model', 'birdclef/network.py')},
            'birdclef.preprocessing': {'birdclef.preprocessing.foo': ('preprocessing.html#foo', 'birdclef/preprocessing.py')},
            'birdclef.trainer': { 'birdclef.trainer.log_weights': ('trainer.html#log_weights', 'birdclef/trainer.py'),
                                  'birdclef.trainer.train': ('trainer.html#train', 'birdclef/trainer.py'),
                                  'birdclef.trainer.train_one_epoch': ('trainer.html#train_one_epoch', 'birdclef/trainer.py'),
                                  'birdclef.trainer.validate_model': ('trainer.html#validate_model', 'birdclef/trainer.py')},
            'birdclef.training_utils': { 'birdclef.training_utils.compute_metrics': ( 'training_utils.html#compute_metrics',
                                                                                      'birdclef/training_utils.py'),
                                         'birdclef.training_utils.get_callback_func': ( 'training_utils.html#get_callback_func',
                                                                                        'birdclef/training_utils.py'),
                                         'birdclef.training_utils.get_loss_func': ( 'training_utils.html#get_loss_func',
                                                                                    'birdclef/training_utils.py'),
                                         'birdclef.training_utils.get_lr_scheduler': ( 'training_utils.html#get_lr_scheduler',
                                                                                       'birdclef/training_utils.py'),
                                         'birdclef.training_utils.get_optimizer': ( 'training_utils.html#get_optimizer',
                                                                                    'birdclef/training_utils.py'),
                                         'birdclef.training_utils.show_one_example': ( 'training_utils.html#show_one_example',
                                                                                       'birdclef/training_utils.py')},
            'birdclef.utils': { 'birdclef.utils.mel_to_wave': ('utils.html#mel_to_wave', 'birdclef/utils.py'),
                                'birdclef.utils.plot_audio': ('utils.html#plot_audio', 'birdclef/utils.py'),
                                'birdclef.utils.plot_fbank': ('utils.html#plot_fbank', 'birdclef/utils.py'),
                                'birdclef.utils.plot_specgram': ('utils.html#plot_specgram', 'birdclef/utils.py'),
                                'birdclef.utils.plot_spectrogram': ('utils.html#plot_spectrogram', 'birdclef/utils.py'),
                                'birdclef.utils.plot_waveform': ('utils.html#plot_waveform', 'birdclef/utils.py')}}}
